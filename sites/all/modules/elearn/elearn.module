<?php



/**
 * Implements hook_form_alter().
 */
function elearn_form_alter(&$form, &$form_state, $form_id) {
//var_dump($form_id);
  global $user;
    if ($form_id == 'course_node_form') {
        //hide quiz reference field
	//$form['field_quiz']['und']['#type']= 'hidden'; // select
        $form['field_quiz']['und']['0']['target_id']['#type']= 'hidden'; //autocompleate
    }

    if ($form_id == 'quiz_node_form') {
        $form['remember_settings'] = array('#type' => 'hidden', '#value' => '1');
        
        //Certificate fieldgroup
        hide($form['certificate']);
        $form['certificate']['map']['manual']['manual'] = array("#type" => 'hidden', "#value" => 46);

        //taking fieldgroup
        $form['taking']['allow_skipping'] = array( '#type' => 'hidden', '#value' => '0');
        $form['taking']['allow_jumping'] = array( '#type' => 'hidden', '#value' => '0');
        $form['taking']['allow_change'] = array( '#type' => 'hidden', '#value' => '0');
        $form['taking']['allow_change_blank'] = array( '#type' => 'hidden', '#value' => '0');
        $form['taking']['repeat_until_correct'] = array( '#type' => 'hidden', '#value' => '0');
        $form['taking']['build_on_last'] = array( '#type' => 'hidden', '#value' => '');
        $form['taking']['mark_doubtful'] = array( '#type' => 'hidden', '#value' => '0');
        $form['taking']['show_passed'] = array( '#type' => 'hidden', '#value' => '1');
        $form['taking']['randomization'] = array( '#type' => 'hidden', '#value' => '0');       
        $form['taking']['time_limit'] = array('#type' => 'hidden', '#value' => '0');
        $form['takes'] = array('#type' => 'hidden', '#value' => '3');
        $form['show_attempt_stats'] = array('#type' => 'hidden', '#value' => '1');        
        hide($form['taking'] ["multiple_takes"] );

        hide ($form['taking']['review_options']['question'] );
//        $form['taking']['review_options']['question'] ["#options"]['correct'] = "Whether correct";
//        $form['taking']['review_options']['question'] ["#options"]['score'] = "Score";
//        //$form['taking']['review_options']['question'] ["#default_value"]['correct'] = "";
//        //$form['taking']['review_options']['question'] ["#default_value"]['score'] = "score";
//
        $form['taking']['review_options']['#description'] = "Control what feedback appears at the end.";
        unset ($form['taking']['review_options']['end'] ["#options"]);
        $form['taking']['review_options']['end'] ["#options"]['quiz_question_view_full'] = "Question: Full content";
        $form['taking']['review_options']['end'] ["#options"]['attempt'] = "Attempt";
        $form['taking']['review_options']['end'] ["#options"]['choice'] = "Choices";
        $form['taking']['review_options']['end'] ["#options"]['correct'] = "Whether correct";
        $form['taking']['review_options']['end'] ["#options"]['score'] = "Score";
        
        //Result feedback fieldgroup
        hide($form["resultoptions"] );
        
        //Pass/Fail options fieldgroup
        $form['taking']["pass_rate"]=array("#type"=> "textfield", "#title"=>"Passing rate for Quiz (%)", "#default_value"=>$form['summaryoptions']["pass_rate"]["#default_value"], "#description"=>"Passing rate for this Quiz as a percentage score.", "#required"=> false);
        hide($form['summaryoptions']);
    
        //Availability options fieldgroup
        $form['quiz_always'] = array('#type' => 'hidden', '#value' => '1');
        hide($form["quiz_availability"] );
        
        $form['#after_build'][] = 'elearn_quiz_node_form_after_build';
    }
    
    if ($form_id == 'truefalse_node_form') {
        hide($form['feedback']);   
    }

    if ($form_id == 'multichoice_node_form') {
        hide($form['feedback']);   
    }
    
    if (strstr($form_id, 'commerce_cart_add_to_cart_form')) {
      $form['warning'] = array(
        '#markup' => t('<br /><span class="price-note"> Please note that the price will be altered according to number of attendies entered</span>'),
        '#weight' => 100
      );
    }
    if ($form_id == 'course_node_form') {
      $node = $form_state['node'];
      if (isset($node->nid)) {
          //prevent deleting a course
          unset($form['actions']['delete']);
          //disable language field on editing course
          $form['language']['#disabled'] = TRUE;
      }
      //allow trainers to publish/unpublish their courses but without promote and sticky
      if(in_array('trainer', $user->roles)) {
        if ($form['options']['#access'] == FALSE) {
          $form['options']['#access'] = TRUE;
        }
        unset($form['options']['promote']);
        unset($form['options']['sticky']);
      }
    }
    
}

//ensure our hook runs the last
function elearn_module_implements_alter(&$implementations, $hook) {
    if ($hook == 'form_alter') {
        $module = 'elearn';
        // store
        $group = array($module => $implementations[$module]);
        // unset
        unset($implementations[$module]);
        // add to the end
        $implementations = $implementations + $group;
    }
}


function elearn_node_update($node){
  global $user;
  //handle publish/unpublish of Course to publish/unpublish corresponding Product Display
  //as rules doesn't do publishing because of permission issue
  if($node->type == "course"){
    //find course HOLDER
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node');
    $query->fieldCondition('field_reference_to_course', 'target_id', $node->nid);
    $result = $query->execute();
    $course_holders = (isset($result['node'])) ? $result['node'] : array();
    
    //we count on that the query returns only one row
    foreach($course_holders as $holder_id => $holder){
      //find course PRODUCT
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'commerce_product');
      $query->fieldCondition('field_course_holder_reference', 'target_id', $holder_id);
      $result = $query->execute();
      $products = $result['commerce_product'];  
      foreach($products as $product_id => $product){
        //find course PRODUCT DISPLAY
        $pd_id = elearn_get_display_node_by_product_id($product_id, 'field_product');
        $pd = node_load($pd_id);
        $pd->status = $node->status;
        node_save($pd);
      } 
    }
    
  }
  
  //Create Course HOLDER, PRODUCT and PD on creating a quiz(course)
  if($node->type == "quiz"){
    $course_id =        elearn_get_node_referensing_node($node->nid, 'field_quiz', 'node'  );
    $course = node_load($course_id);
    $course_wrapper = entity_metadata_wrapper('node', $course);

    $course_holder_id =  elearn_get_node_referensing_node($course_id, 'field_reference_to_course', 'node'  );
    $product_id =        elearn_get_node_referensing_node($course_holder_id, 'field_course_holder_reference', 'commerce_product'  );
    $product_diplay_id = elearn_get_display_node_by_product_id($product_id, 'field_product');
    
    //create course HOLDER if it doesn't exist
    if(!$course_holder_id ){
      $values = array(
        'type' => 'course_holder',
        'uid' => $user->uid,
        'status' => 1,
        'comment' => 0,
        'promote' => 0,
      );
      $entity = entity_create('node', $values);
      $ewrapper = entity_metadata_wrapper('node', $entity);
      $ewrapper->title->set($course->title);
      $ewrapper->field_reference_to_course->set(intval($course_id));
      $ewrapper->field_reference_to_quiz->set(intval($node->nid));
      $ewrapper->language->set($course->language);
      $ewrapper->save();  
      $course_holder_id = $ewrapper->nid->value();  
      
//      echo "after create course HOLDER";
//      var_dump($course_id,$course_holder_id, $product_id , $product_diplay_id);

    }
 
    //create course PRODUCT if it doesn't exist
    if(!$product_id ){
      $cp = commerce_product_new('product');
      $cp->is_new = TRUE;
      $cp->revision_id = NULL;
      $cp->uid = $user->uid;;
      $cp->status = 1;
      $cp->created = $cp->changed = time();
      $cp->sku = $course->title . " - " . $course->nid;
      $cp->title = $course->title;
      $cp->language = $course->language;
      $price = field_get_items('node', $course, 'field_base_price_of_the_course');
      $cp->commerce_price = array(LANGUAGE_NONE => array( 0 => array(
       'amount' => $price[0]['amount'],
       'currency_code' => 'USD',
      )));
      //$product[retail_price];
      
      $form_state = array();
      $form = array();
      $form_state['values']['field_course_holder_reference'] =array(LANGUAGE_NONE => array(0 => array('target_id' => $course_holder_id)));;
      $form['#parents'] = array();
      field_attach_submit('commerce_product', $cp, $form, $form_state);
      commerce_product_save($cp);  
      $product_id = $cp->product_id;
//      echo "after create course PRODUCT";
//      var_dump($course_id,$course_holder_id, $product_id , $product_diplay_id);

    }
 
    //create course PRODUCT DISPLAY if it doesn't exist
    if(!$product_diplay_id ){
      $values = array(
        'type' => 'course_product_display',
        'uid' => $user->uid,
        'status' => $course->status,
        'comment' => 0,
        'promote' => 0,
      );
      $entity = entity_create('node', $values);
      $ewrapper = entity_metadata_wrapper('node', $entity);
      $ewrapper->title->set($course->title);
      $ewrapper->field_product->set(intval($product_id));
      $ewrapper->language->set($course->language);
      $category = field_get_items('node', $course, 'field_category');
      $ewrapper->field_pd_category->set(intval($category[0]['tid']));
      $short_description = field_get_items('node', $course, 'field_course_short_description');
      $ewrapper->field_course_short_description->set($short_description['0']['value']);
      $ewrapper->save(); 
    }
  }
}
//get a node that referenses a node_id
function elearn_get_node_referensing_node($node_id, $field_name, $entity_type  ) {
  $query = new EntityFieldQuery;
  $result = $query->entityCondition('entity_type', $entity_type, '=')
    ->fieldCondition($field_name, 'target_id', $node_id, '=')
    ->range(0, 1)    
    ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT')
    ->execute();

  if (empty($result[$entity_type])) {
    return FALSE;
  }
  //var_dump($result[$entity_type]);
  if($entity_type == 'commerce_product')return reset($result[$entity_type])->product_id;
  return reset($result[$entity_type])->nid;
}


function elearn_get_display_node_by_product_id($product_id, $product_field_name = 'product_reference') {
  $query = new EntityFieldQuery;
  $result = $query->entityCondition('entity_type', 'node', '=')
    ->fieldCondition($product_field_name, 'product_id', $product_id, '=')
    ->range(0, 1)    
    ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT')
    ->execute();

  if (empty($result['node'])) {
    return FALSE;
  }

  return reset($result['node'])->nid;
}

function elearn_node_insert($node){
  if($node->type == "course_product_display"){
    //$product = commerce_product_load($node->field_product);
   // var_dump($node); exit;
  }
}

// afterbuild function
function elearn_quiz_node_form_after_build($form) {
    // We want to hide input formats 
    // not needed after hide_formats module was enabled
   // $form['body'][LANGUAGE_NONE][0]['format']['#prefix']= '<div style="display:none;">';
    //$form['body'][LANGUAGE_NONE][0]['format']['#sufix']= '</div>';   
    return $form;
}

/*
 * Implements hook_entity_presave().
 */
//function elearn_entity_presave($entity, $type) {
//  if ($type === 'node' && isset($entity->field_product)) {
//    $product_ids = array();
//    foreach($entity->field_product as $lang => $items) {
//      foreach($items as $i => $values) {
//        if(!empty($values['product_id'])) {
//          $product_ids[] = $values['product_id'];
//        }
//      }
//    }
//    $products = entity_load('commerce_product', $product_ids);
//    foreach($products as $id => $product) {
//      $changed = false;
//      //Find all translatable fields for the product
//      $field_instances = field_info_instances('commerce_product', $product->type);
//      foreach($field_instances as $field_name => $field_instance) {
//        $field = field_info_field($field_name);
//        if(!empty($field['translatable'])) {
//          //Add a version of the field in the product display's language if it doesn't exist already
//          if(!isset($product->{$field_name}[$entity->language])) {
//            //Copy over the language-agnostic value.
//            $product->{$field_name}[$entity->language] = $product->{$field_name}[LANGUAGE_NONE];
//            $changed = true;
//          }
//        }
//      }
//      //Save the product.
//      if($changed) {
//        entity_save('commerce_product', $product);
//      }
//    }
//  }
//}


/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter the Commerce 'Add to Cart' form.
 */
function elearn_form_commerce_cart_add_to_cart_form_alter(&$form, &$form_state) {
  //limit buyers by role
  global $user;
  $roles_allowed_to_buy = array(
    'company',
    'administrator',
  );
  if (!array_intersect($user->roles, $roles_allowed_to_buy)) {
    // Display a help message.
    $form['help'] = array(
      '#markup' => t('You do not have permission to buy this product.'),
    );
    // Disable the whole form.
    $form['#disabled'] = TRUE;
    // Remove any submit button(s).
    unset($form['submit']);
  }
  
  //limit cart to only one product
  $form['#validate'][] = 'elearn_cart_validate';

}

  //limit cart to only one product
function elearn_cart_validate($form, &$form_state) {
  $order = commerce_cart_order_load($GLOBALS['user']->uid);
  if ($order) {
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    if ($order_wrapper->commerce_line_items->value()) {
      form_set_error('', t("You can only have one Course in your cart. <a href=\"/cart\">View cart</a>"));
    }
  }
}



function elearn_commerce_price_component_type_info() {
  return array(
    'additional_course_price_component' => array(
      'title' => t('Additional price based on number of attendies'), 
      'display_title' => t('Additional price based on number of attendies'), 
      'weight' => 100,
    ),
  );
}


/*
//alter the price in cart & order
function elearn_commerce_cart_line_item_refresh($line_item, $order_wrapper) {//var_dump($line_item);
  if ($line_item->type == "product") {
    $price = 100 * $line_item->quantity; //1 dollar
    $line_item->commerce_unit_price[LANGUAGE_NONE]['0']['amount'] += $price;//to remove the line item set it's unit_price = null
    $line_item->commerce_unit_price[LANGUAGE_NONE]['0']['data']['components']['0']['price']['amount'] = $price; //alter the base_price component
  }
}


//alter the price in cart & order
// do NOT WORK
//function elearn_commerce_cart_line_item_refresh($line_item, $order_wrapper){
//
//    $line_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
//
//    $new_price = 100; 
//
//    if(!empty($new_price)){
//        $line_wrapper->commerce_unit_price->amount->set($new_price);
//        $line_wrapper->save();
//    }
//
//}



/*
function elearn_commerce_payment_order_paid_in_full($transaction) {
  // No example.
  //var_dump($transaction); exit;
}

function elearn_commerce_order_presave($order) {
  // Find out if our order already has an example_2 line item.
  $type_exists = FALSE;
  //var_dump($order->commerce_line_items['und']);exit;
  if (!empty($order->commerce_line_items['und'])) {
    foreach ($order->commerce_line_items['und'] as $delta => $line_item_entry) {//var_dump($line_item_entry);exit;
      if ($line_item = commerce_line_item_load($line_item_entry['line_item_id'])) {
        if ($line_item->type == 'example_line_item_2') {
          $type_exists = TRUE;
          break;
        }
      }
    }
  }

  // If our line item is not yet in the order and the order has an ID,
  // create a line item to add to the order.
  if (!$type_exists && $order->order_id > 0) {
    $line_item = elearn_line_item_2_new($order->order_id);
    commerce_line_item_save($line_item);
    $order->commerce_line_items['und'][] = array('line_item_id' => $line_item->line_item_id);
  }
}

function elearn_line_item_2_new($order_id = 0) {
  $type = 'example_line_item_2';

  // Create the new line item.
  $line_item = entity_create('commerce_line_item', array(
    'type' => $type, 
    'order_id' => $order_id, 
    'quantity' => 1,
  ));

  // For this example, we'll use a price of USD $5.00 for the "surcharge".
  $amount = variable_get('line_item_example_line_item_2_amount', 500);
  var_dump($amount); exit;
  $currency_code = variable_get('line_item_example_line_item_2_currency', 'USD');

  $line_item->commerce_unit_price = array('und' => array(
      '0' => array(
        'amount' => $amount,
        'currency_code' => $currency_code,
      ),
    ));

  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

  if (!is_null($line_item_wrapper->commerce_unit_price->value())) {
    // Add the base price to the components array.
    if (!commerce_price_component_load($line_item_wrapper->commerce_unit_price->value(), 'base_price')) {
      $line_item_wrapper->commerce_unit_price->data = commerce_price_component_add(
        $line_item_wrapper->commerce_unit_price->value(), 
        'base_price', 
        $line_item_wrapper->commerce_unit_price->value(), 
        TRUE
      );
    }
  }
  // Return the line item.
  return $line_item;
}
*/